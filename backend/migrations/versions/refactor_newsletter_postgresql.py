"""Refactor newsletter model for PostgreSQL with proper relationships

Revision ID: refactor_newsletter_postgresql
Revises: 30fe4bfb9100
Create Date: 2025-07-01 00:34:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'refactor_newsletter_postgresql'
down_revision = '30fe4bfb9100'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Update newsletter_sources table to use UUID
    op.execute("ALTER TABLE newsletter_sources ALTER COLUMN id TYPE UUID USING id::UUID")
    
    # Add source_id column to newsletters table
    op.add_column('newsletters', sa.Column('source_id', postgresql.UUID(as_uuid=True), nullable=True))
    
    # Update newsletters table columns to use UUID
    op.execute("ALTER TABLE newsletters ALTER COLUMN id TYPE UUID USING id::UUID")
    op.execute("ALTER TABLE newsletters ALTER COLUMN user_id TYPE UUID USING user_id::UUID")
    
    # Update array columns to use PostgreSQL ARRAY type
    op.execute("ALTER TABLE newsletters ALTER COLUMN bullish_terms TYPE TEXT[] USING string_to_array(bullish_terms, ',')")
    op.execute("ALTER TABLE newsletters ALTER COLUMN bearish_terms TYPE TEXT[] USING string_to_array(bearish_terms, ',')")
    op.execute("ALTER TABLE newsletters ALTER COLUMN tickers TYPE TEXT[] USING string_to_array(tickers, ',')")
    op.execute("ALTER TABLE newsletters ALTER COLUMN key_phrases TYPE TEXT[] USING string_to_array(key_phrases, ',')")
    
    # Create foreign key constraint for source_id
    op.create_foreign_key('fk_newsletters_source_id', 'newsletters', 'newsletter_sources', ['source_id'], ['id'])
    
    # Create index for efficient querying
    op.create_index('ix_newsletters_user_id_publish_date_desc', 'newsletters', ['user_id', sa.text('publish_date DESC')])
    
    # Update existing newsletters to link with newsletter_sources
    # This assumes you have a way to map existing source strings to source IDs
    # You may need to customize this based on your data
    op.execute("""
        UPDATE newsletters 
        SET source_id = ns.id 
        FROM newsletter_sources ns 
        WHERE newsletters.source = ns.name
    """)
    
    # Make source_id NOT NULL after populating it
    op.alter_column('newsletters', 'source_id', nullable=False)
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop the index
    op.drop_index('ix_newsletters_user_id_publish_date_desc', table_name='newsletters')
    
    # Drop foreign key constraint
    op.drop_constraint('fk_newsletters_source_id', 'newsletters', type_='foreignkey')
    
    # Convert array columns back to text
    op.execute("ALTER TABLE newsletters ALTER COLUMN bullish_terms TYPE TEXT USING array_to_string(bullish_terms, ',')")
    op.execute("ALTER TABLE newsletters ALTER COLUMN bearish_terms TYPE TEXT USING array_to_string(bearish_terms, ',')")
    op.execute("ALTER TABLE newsletters ALTER COLUMN tickers TYPE TEXT USING array_to_string(tickers, ',')")
    op.execute("ALTER TABLE newsletters ALTER COLUMN key_phrases TYPE TEXT USING array_to_string(key_phrases, ',')")
    
    # Convert UUID columns back to VARCHAR
    op.execute("ALTER TABLE newsletters ALTER COLUMN id TYPE VARCHAR(36) USING id::TEXT")
    op.execute("ALTER TABLE newsletters ALTER COLUMN user_id TYPE VARCHAR(36) USING user_id::TEXT")
    
    # Drop source_id column
    op.drop_column('newsletters', 'source_id')
    
    # Convert newsletter_sources id back to VARCHAR
    op.execute("ALTER TABLE newsletter_sources ALTER COLUMN id TYPE VARCHAR(36) USING id::TEXT")
    
    # ### end Alembic commands ###
